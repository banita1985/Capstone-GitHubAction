name: Migrating Jenkin-GitHub Action

on:
  push:
    branches: [ "master" ]

jobs:
  build-and-scan: 
    runs-on: ubuntu-latest

    env:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

    steps:
      # Step 1: Checkout source code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up Java
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # Step 3: Cache Maven dependencies
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Step 4: Build the application
      - name: Build with Maven
        run: mvn -B clean package

      # Step 5 Run SonarQube scan
      - name: Build and analyze with SonarQube
        run: | 
          mvn sonar:sonar \
              -Dsonar.projectKey=banita1985_Capstone-GitHubAction \
              -Dsonar.organization=banita1985 \
              -Dsonar.host.url=https://sonarcloud.io \
              -Dsonar.login=$SONAR_TOKEN
              
      # Step 6 List and Upload the artifacts
      - name: List target directory
        run: ls -l target/

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: githubaction-jar
          path: target/*.jar
       # Step 7: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 8: Build Docker image using your JAR
      - name: Build Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/capstone:1.0 .

          


    
